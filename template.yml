AWSTemplateFormatVersion : '2010-09-09'
Description: Zadara performance metrics -> Cloudwatch

Parameters:
  ZadaraApiKey:
    Type: String
  ZadaraVpsaHost:
    Type: String
  MetricNamespace:
    Type: String
    Default: ZadaraPerformance
  MetricInterval:
    Type: Number
    Default: 30
  VpcSubnetId:
    Type: String
  VpcSecurityGroupId:
    Type: String
  LambdaCodeBucket:
    Type: String

Resources:
  ZadaraMetricsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: function.handler
      FunctionName: !Sub "${AWS::StackName}-function"
      Role: !GetAtt [ZadaraMetricsRole, Arn]
      Timeout: 30
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Sub "z2cw/${AWS::StackName}-function.zip"
      Environment:
        Variables:
          VPSA_HOST: !Ref ZadaraVpsaHost
          API_KEY: !Ref ZadaraApiKey
          METRIC_NAMESPACE: !Ref MetricNamespace
          METRIC_INTERVAL: !Ref MetricInterval
          LAST_MESSAGE_ID_PARAM_NAME: !Sub "${AWS::StackName}-last-message-id"
          VPSA_LOG_GROUP_NAME: !Sub "${AWS::StackName}-vpsa-logs"
      VpcConfig:
        SubnetIds:
          - !Ref VpcSubnetId
        SecurityGroupIds:
          - !Ref VpcSecurityGroupId

  ZadaraMetricsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"

  ZadaraMetricsEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "rate(10 minutes)"
      Name: !Sub "${AWS::StackName}-event-rule"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt ZadaraMetricsFunction.Arn
          Id: "PublishMetricsScheduler"

  ZadaraMetricsEventLambdaPermissions:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ZadaraMetricsFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt [ZadaraMetricsEventRule, Arn]


  ZadaraMetricsVpsaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-vpsa-logs"
      RetentionInDays: 365

  ZadaraMetricsVpsaLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref ZadaraMetricsVpsaLogGroup
      LogStreamName: !Join ['-', !Split [':', !Ref ZadaraVpsaHost]]
